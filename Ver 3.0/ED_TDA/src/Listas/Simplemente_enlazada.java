/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Listas;

/**
 *
 * @author juand
 */
public class Simplemente_enlazada extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private SinglyLinkedList lista;
            
    public Simplemente_enlazada() {
        initComponents();
        
        lista = new SinglyLinkedList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jTextField5 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Eras Bold ITC", 0, 12)); // NOI18N
        jLabel1.setText("LISTA SIMPLEMENTE ENLAZADA");

        jButton1.setText("Visualizar lista");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Ingresa los datos iniciales de la lista, separados por \",\"");

        jButton2.setText("Insertar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Insertar al final");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Operaciones unitarias:");

        jButton4.setText("Remover");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton5.setText("Tama√±o actual");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        jButton6.setText("Buscar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jButton7.setText("Insertar al inicio");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(152, 152, 152))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(37, 37, 37)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(43, 43, 43)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3))))))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6))
                        .addGap(18, 18, 18)
                        .addComponent(jButton5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //BOTON TRAVERSE---------------------------------------------------------------------------------------------------------------------------------------------
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

/**
 * M√≥dulo que mide el rendimiento de los metodos aplicados a una lista enlazada.
 * 
 * <p>Este bloque realiza las siguientes acciones:</p>
 * <ol>
 *   <li>Invoca el recolector de basura para limpiar memoria innecesaria antes de la medici√≥n.</li>
 *   <li>Registra la memoria usada antes de ejecutar la operaci√≥n.</li>
 *   <li>Mide el tiempo antes y despu√©s de ejecutar el m√©todo llamado.</li>
 *   <li>Muestra el contenido de la lista en un JTextArea.</li>
 *   <li>Calcula la memoria usada despu√©s y el tiempo transcurrido, y los muestra en otro JTextArea.</li>
 * </ol>
 */        

//Modulo-----------------------------------------------------------------------------------------------------------------        
        Runtime runtime = Runtime.getRuntime();
        runtime.gc();
        long memoriaAntes = runtime.totalMemory()- runtime.freeMemory();
        long tiempoInicio = System.nanoTime();  
        
        jTextArea1.append(lista.traverse());
        
        long tiempoFinal = System.nanoTime();
        long memoriaDespues = runtime.totalMemory()-runtime.freeMemory();
        jTextArea3.append("Tiempo de ejecucion (ns):"+(tiempoFinal-tiempoInicio)+"\n");
        jTextArea3.append("Memoria usada (bytes):"+(memoriaDespues - memoriaAntes)+"\n");
//Modulo-----------------------------------------------------------------------------------------------------------------
    }//GEN-LAST:event_jButton1ActionPerformed
    //LLENADO INICIAL DE LISTA--------------------------------------------------------------------------------
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
    //BOTON LISTA INICIAL------------------------------------------------------------------------
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String texto = jTextField1.getText().trim();

/**
 * M√≥dulo que mide el rendimiento de los metodos aplicados a una lista enlazada.
 * 
 * <p>Este bloque realiza las siguientes acciones:</p>
 * <ol>
 *   <li>Invoca el recolector de basura para limpiar memoria innecesaria antes de la medici√≥n.</li>
 *   <li>Registra la memoria usada antes de ejecutar la operaci√≥n.</li>
 *   <li>Mide el tiempo antes y despu√©s de ejecutar el m√©todo llamado.</li>
 *   <li>Muestra el contenido de la lista en un JTextArea.</li>
 *   <li>Calcula la memoria usada despu√©s y el tiempo transcurrido, y los muestra en otro JTextArea.</li>
 * </ol>
 */         
        
//Modulo-----------------------------------------------------------------------------------------------------------------        
        Runtime runtime = Runtime.getRuntime();
        runtime.gc();
        long memoriaAntes = runtime.totalMemory()- runtime.freeMemory();
        long tiempoInicio = System.nanoTime(); 
        
        if(texto.isEmpty()){
        jTextArea1.append("Ingresa al menos un numero\n");
        return;
        }
        
        String[] partes = texto.split(",");
        int contador =0;
        
        for(String parte : partes){
            try{
            int numero= Integer.parseInt(parte.trim());
            lista.insertAtEnd(numero);
            jTextArea1.append("Insertado al final: "+numero+"\n");
            contador ++;
            }
            catch (NumberFormatException e){
                jTextArea1.append("Solamente ingresar numeros");
            }
        }
        jTextField1.setText("");
        
        if(contador >0){
        jTextArea1.append("Total de numeros insertados: "+contador+"\n");
        }
        
        long tiempoFinal = System.nanoTime();
        long memoriaDespues = runtime.totalMemory()-runtime.freeMemory();
        jTextArea3.append("Tiempo de ejecucion (ns):"+(tiempoFinal-tiempoInicio)+"\n");
        jTextArea3.append("Memoria usada (bytes):"+(memoriaDespues - memoriaAntes)+"\n");
//Modulo-----------------------------------------------------------------------------------------------------------------        
        
    }//GEN-LAST:event_jButton2ActionPerformed
    // INSERTAR AL FINAL--------------------------------------------------------------------------------------------------------------------------------------
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    String valor = jTextField2.getText().trim(); // capturamos el texto ingresado

    if (!valor.isEmpty()) {
        try {
            int numero = Integer.parseInt(valor); // convertimos a entero
            
/**
 * M√≥dulo que mide el rendimiento de los metodos aplicados a una lista enlazada.
 * 
 * <p>Este bloque realiza las siguientes acciones:</p>
 * <ol>
 *   <li>Invoca el recolector de basura para limpiar memoria innecesaria antes de la medici√≥n.</li>
 *   <li>Registra la memoria usada antes de ejecutar la operaci√≥n.</li>
 *   <li>Mide el tiempo antes y despu√©s de ejecutar el m√©todo llamado.</li>
 *   <li>Muestra el contenido de la lista en un JTextArea.</li>
 *   <li>Calcula la memoria usada despu√©s y el tiempo transcurrido, y los muestra en otro JTextArea.</li>
 * </ol>
 */             
            
//Modulo----------------------------------------------------------------------------------------------------------------
            Runtime runtime = Runtime.getRuntime();
            runtime.gc();
            long memoriaAntes = runtime.totalMemory()- runtime.freeMemory();
            long tiempoInicio = System.nanoTime();
            
            lista.insertAtEnd(numero); // insertamos en la lista
            
            long tiempoFinal = System.nanoTime();
            long memoriaDespues = runtime.totalMemory()-runtime.freeMemory();
            jTextArea3.append("Tiempo de ejecucion (ns):"+(tiempoFinal-tiempoInicio)+"\n");
            jTextArea3.append("Memoria usada (bytes):"+(memoriaDespues - memoriaAntes)+"\n");
            jTextArea1.append("‚úÖ Insertado al final: " + numero + "\n");
//Modulo-----------------------------------------------------------------------------------------------------------------
            jTextField2.setText(""); // limpiamos el campo
        } catch (NumberFormatException e) {
            jTextArea1.append("‚ö†Ô∏è Ingresa un n√∫mero v√°lido.\n");
        }
    } else {
        jTextArea1.append("‚ö†Ô∏è Debes ingresar un valor para insertar.\n");
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed
// BOTON REMOVER--------------------------------------------------------------------------------------------------------------------------------------------------
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
        int valor = Integer.parseInt(jTextField3.getText().trim());
        
/**
 * M√≥dulo que mide el rendimiento de los metodos aplicados a una lista enlazada.
 * 
 * <p>Este bloque realiza las siguientes acciones:</p>
 * <ol>
 *   <li>Invoca el recolector de basura para limpiar memoria innecesaria antes de la medici√≥n.</li>
 *   <li>Registra la memoria usada antes de ejecutar la operaci√≥n.</li>
 *   <li>Mide el tiempo antes y despu√©s de ejecutar el m√©todo llamado.</li>
 *   <li>Muestra el contenido de la lista en un JTextArea.</li>
 *   <li>Calcula la memoria usada despu√©s y el tiempo transcurrido, y los muestra en otro JTextArea.</li>
 * </ol>
 */         
        
//Modulo-----------------------------------------------------------------------------------------------------------------        
        Runtime runtime = Runtime.getRuntime();
        runtime.gc();
        long memoriaAntes = runtime.totalMemory()- runtime.freeMemory();
        long tiempoInicio = System.nanoTime();          
        
        String resultado = lista.remove(valor);
        
        long tiempoFinal = System.nanoTime();
        long memoriaDespues = runtime.totalMemory()-runtime.freeMemory();
        jTextArea3.append("Tiempo de ejecucion (ns):"+(tiempoFinal-tiempoInicio)+"\n");
        jTextArea3.append("Memoria usada (bytes):"+(memoriaDespues - memoriaAntes)+"\n");
//Modulo-----------------------------------------------------------------------------------------------------------------        
        jTextArea1.append(resultado);
        jTextField3.setText("");
        }
        catch(NumberFormatException e){
        jTextArea1.append("Ingresar un numero valido\n");
        }

    }//GEN-LAST:event_jButton4ActionPerformed
    // BOTON BUSCAR-------------------------------------------------- ---------------------------------------------------------------------------------------------
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try{
        int valor = Integer.parseInt(jTextField4.getText().trim());
 
/**
 * M√≥dulo que mide el rendimiento de los metodos aplicados a una lista enlazada.
 * 
 * <p>Este bloque realiza las siguientes acciones:</p>
 * <ol>
 *   <li>Invoca el recolector de basura para limpiar memoria innecesaria antes de la medici√≥n.</li>
 *   <li>Registra la memoria usada antes de ejecutar la operaci√≥n.</li>
 *   <li>Mide el tiempo antes y despu√©s de ejecutar el m√©todo llamado.</li>
 *   <li>Muestra el contenido de la lista en un JTextArea.</li>
 *   <li>Calcula la memoria usada despu√©s y el tiempo transcurrido, y los muestra en otro JTextArea.</li>
 * </ol>
 */         
        
//Modulo-----------------------------------------------------------------------------------------------------------------       
        Runtime runtime = Runtime.getRuntime();
        runtime.gc();
        long memoriaAntes = runtime.totalMemory()- runtime.freeMemory();
        long tiempoInicio = System.nanoTime();   
        
        String resultado = lista.search(valor);
        
        long tiempoFinal = System.nanoTime();
        long memoriaDespues = runtime.totalMemory()-runtime.freeMemory();
        jTextArea3.append("Tiempo de ejecucion (ns):"+(tiempoFinal-tiempoInicio)+"\n");
        jTextArea3.append("Memoria usada (bytes):"+(memoriaDespues - memoriaAntes)+"\n");
//Modulo-----------------------------------------------------------------------------------------------------------------          
        
        jTextArea1.append(resultado);
        }
        catch(NumberFormatException e){
        jTextArea1.append("Ingresa un numero valido para buscar\n");
        }
        jTextField4.setText("");
    }//GEN-LAST:event_jButton6ActionPerformed
    // BOTON TAMA√ëO ACTUAL-------------------------------------------------------------------------------------------------------------------------------------
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
 
/**
 * M√≥dulo que mide el rendimiento de los metodos aplicados a una lista enlazada.
 * 
 * <p>Este bloque realiza las siguientes acciones:</p>
 * <ol>
 *   <li>Invoca el recolector de basura para limpiar memoria innecesaria antes de la medici√≥n.</li>
 *   <li>Registra la memoria usada antes de ejecutar la operaci√≥n.</li>
 *   <li>Mide el tiempo antes y despu√©s de ejecutar el m√©todo llamado.</li>
 *   <li>Muestra el contenido de la lista en un JTextArea.</li>
 *   <li>Calcula la memoria usada despu√©s y el tiempo transcurrido, y los muestra en otro JTextArea.</li>
 * </ol>
 */ 

//Modulo-----------------------------------------------------------------------------------------------------------------       
        Runtime runtime = Runtime.getRuntime();
        runtime.gc();
        long memoriaAntes = runtime.totalMemory()- runtime.freeMemory();
        long tiempoInicio = System.nanoTime();    
        
        String resultado= lista.size();
        
        long tiempoFinal = System.nanoTime();
        long memoriaDespues = runtime.totalMemory()-runtime.freeMemory();
        jTextArea3.append("Tiempo de ejecucion (ns):"+(tiempoFinal-tiempoInicio)+"\n");
        jTextArea3.append("Memoria usada (bytes):"+(memoriaDespues - memoriaAntes)+"\n");
//Modulo-----------------------------------------------------------------------------------------------------------------        
        jTextArea1.append(resultado);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed
//INSERTAR AL INICIO--------------------------------------------------------------------------------------------------------------------------------------------
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
 String valor = jTextField5.getText().trim(); // capturamos el texto ingresado

    if (!valor.isEmpty()) {
        try {
            int numero = Integer.parseInt(valor); // convertimos a entero
            
/**
 * M√≥dulo que mide el rendimiento de los metodos aplicados a una lista enlazada.
 * 
 * <p>Este bloque realiza las siguientes acciones:</p>
 * <ol>
 *   <li>Invoca el recolector de basura para limpiar memoria innecesaria antes de la medici√≥n.</li>
 *   <li>Registra la memoria usada antes de ejecutar la operaci√≥n.</li>
 *   <li>Mide el tiempo antes y despu√©s de ejecutar el m√©todo llamado.</li>
 *   <li>Muestra el contenido de la lista en un JTextArea.</li>
 *   <li>Calcula la memoria usada despu√©s y el tiempo transcurrido, y los muestra en otro JTextArea.</li>
 * </ol>
 */             
            
//Modulo----------------------------------------------------------------------------------------------------------------
            Runtime runtime = Runtime.getRuntime();
            runtime.gc();
            long memoriaAntes = runtime.totalMemory()- runtime.freeMemory();
            long tiempoInicio = System.nanoTime();
            
            lista.insertAtBeginning(numero); // insertamos en la lista
            
            long tiempoFinal = System.nanoTime();
            long memoriaDespues = runtime.totalMemory()-runtime.freeMemory();
            jTextArea3.append("Tiempo de ejecucion (ns):"+(tiempoFinal-tiempoInicio)+"\n");
            jTextArea3.append("Memoria usada (bytes):"+(memoriaDespues - memoriaAntes)+"\n");
            jTextArea1.append("‚úÖ Insertado al inicio: " + numero + "\n");
//Modulo-----------------------------------------------------------------------------------------------------------------
            jTextField5.setText(""); // limpiamos el campo
        } catch (NumberFormatException e) {
            jTextArea1.append("‚ö†Ô∏è Ingresa un n√∫mero v√°lido.\n");
        }
    } else {
        jTextArea1.append("‚ö†Ô∏è Debes ingresar un valor para insertar.\n");
     }
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simplemente_enlazada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simplemente_enlazada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simplemente_enlazada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simplemente_enlazada.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simplemente_enlazada().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
